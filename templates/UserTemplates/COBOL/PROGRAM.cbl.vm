#set ($language="COBOL")
#set ($description="GENERATES A PROGRAM THAT READS DATA SAVES TO A FILE")
#set ($overwrite="true")
#set ($author="Evol Johnson")
##set ($header="false")
#set ($filep="${entity.name}WriteUserVersion.cbl")
#set ($filename="${outputDir}/${project.name}/${filep}")
#parse("common/utils.parse")
${d} SET SOURCEFORMAT"FREE"
IDENTIFICATION DIVISION.
PROGRAM-ID.  ${entity.name}Write.
AUTHOR.  ${author}.
* http://www.csis.ul.ie/cobol/examples/SeqWrite/SEQWRITE.htm
* Example program showing how to create a sequential file
* using the ACCEPT and the WRITE verbs.
* Note: In this version of COBOL pressing the Carriage Return (CR)
* without entering any data results in ${entity.name}Details being filled
* with spaces.

** THIS TEMPLATE WAS OVERRIDEN BY USER

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT ${entity.name}File ASSIGN TO "${entity.name.toUpperCase()}.DAT"
		ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD ${entity.name}File.
01 ${entity.name}.
#foreach($attribute in $attributes)
#if($attribute.domain == true)
#set($domain=$application.find($attribute.type))
${domain.getCobolPic(2)}.
#else
${attribute.getCobolPic(2)}.
#end
#end
PROCEDURE DIVISION.
Begin.
    OPEN OUTPUT ${entity.name}File
    DISPLAY "Enter ${entity.getVariableName()} details using template below.  Enter no data to end."

    PERFORM Get${entity.name}Details
    PERFORM UNTIL ${entity.name}Details = SPACES
       WRITE ${entity.name}Details
       PERFORM Get${entity.name}Details
    END-PERFORM
    CLOSE ${entity.name}File
    STOP RUN.

Get${entity.name}Details.
    DISPLAY "Enter - #foreach($attribute in $attributes)${attribute.label} #end"
    DISPLAY "#foreach($attribute in $attributes)${attribute.getCobolMask()}#end"
    ACCEPT  ${entity.name}Details.  